digraph compute_checksum_control {
subgraph cluster {
graph [
label="", labeljust=r, style=bold];
0[label=__START__, margin="", shape=rectangle, style=solid];
1[label=__EXIT__, margin="", shape=rectangle, style=solid];
2[label="update_checksum<list<bit<4>, bit<4>, bit<6>, bit<2>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), {hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.dscp, hdr.ipv4.ecn, hdr.ipv4.len, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.frag_offset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.src_addr, hdr.ipv4.dst_addr}, hdr.ipv4.hdr_checksum, HashAlgorithm.csum16);
update_checksum<list<bit<4>, bit<4>, bit<6>, bit<2>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.internal_ipv4.isValid(), {hdr.internal_ipv4.version, hdr.internal_ipv4.ihl, hdr.internal_ipv4.dscp, hdr.internal_ipv4.ecn, hdr.internal_ipv4.len, hdr.internal_ipv4.identification, hdr.internal_ipv4.flags, hdr.internal_ipv4.frag_offset, hdr.internal_ipv4.ttl, hdr.internal_ipv4.protocol, hdr.internal_ipv4.src_addr, hdr.internal_ipv4.dst_addr}, hdr.internal_ipv4.hdr_checksum, HashAlgorithm.csum16);", margin="", shape=rectangle, style=solid];
0 -> 2[label=""];
2 -> 1[label=""];
}
}
